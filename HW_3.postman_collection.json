{
	"info": {
		"_postman_id": "8dd7e66c-746c-4b97-84ff-f62bd8f154fd",
		"name": "HomeWork_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18523166"
	},
	"item": [
		{
			"name": "1****",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"\r",
							"// Требования:\r",
							"// 1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
							"// 2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
							"// 3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\r",
							"\r",
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"\r",
							"//\r",
							"let req = request.data;\r",
							"let age = req.age;\r",
							"let salary = req.salary;\r",
							"let name = req.name;\r",
							"\r",
							"\r",
							"if (name.length >=3 && name.length <= 40 && !name[0].includes(' ') && !name[name.length-1].includes(' ') && age >= 18 && age <= 120 && Number.isInteger(Number(age))\r",
							"&& salary >= 1 && salary <= 1000000 && Number.isInteger(Number(salary))){\r",
							"    pm.test(`Valid params: age = ${age}, salary = ${salary}, name = ${name} `, function (){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"}) \r",
							"} else {\r",
							"    pm.test(`Invalid params: age = ${age}, salary = ${salary}, name = ${name} `, function (){\r",
							"    pm.expect(pm.response.code).to.not.eql(200)\r",
							"})\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"2. http://162.55.220.72:5007/object_info_4\r",
							"* Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary  \r",
							"*/\r",
							"    // Задания с 12-14:\r",
							"    // 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"    // 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"    // 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"//\r",
							"let resp = pm.response.json();\r",
							"let req = pm.request.url.query.toObject();\r",
							"let resp_salary = resp.salary;\r",
							"let req_salary = req.salary;\r",
							"console.log(resp_salary, req_salary)\r",
							"for (i = 0, j = 1; i < resp_salary.length, j < resp_salary.length+1 ; i++,j++ ){\r",
							"        pm.test(`response.salary(${+resp_salary[i]}); index:${i} == request.salary(${+req_salary*j})`, function () {\r",
							"        pm.expect(+resp_salary[i]).to.eql(+req_salary*j)\r",
							"    })\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Andrey&age=24&salary=700",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"3. http://162.55.220.72:5005/object_info_3\r",
							" Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							" */\r",
							"    // Задания с 5-7:\r",
							"    // 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    // 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    // 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"//\r",
							"resp = pm.response.json();\r",
							"req = pm.request.url.query.toObject();\r",
							"// Первый вариант\r",
							"pm.test(`resp.age(${resp.age}) = req.age(${req.age}) && resp.name(${resp.name}) = req.name(${req.name}) && resp.salary(${resp.salary}) = req.salary(${req.salary})`, function (){\r",
							"    if (+resp.age === +req.age && resp.name === req.name && +resp.salary === +req.salary){\r",
							"    check = true\r",
							"} else {\r",
							"    check = false\r",
							"}\r",
							"    pm.expect(check).to.be.true\r",
							"})\r",
							"// Второй вариант\r",
							"tests[`resp.age(${resp.age}) = req.age(${req.age}) && resp.name(${resp.name}) = req.name(${req.name}) && resp.salary(${resp.salary}) = req.salary(${req.salary})`]= +resp.age === +req.age && resp.name === req.name && +resp.salary === +req.salary\r",
							"// Третий вариант\r",
							"pm.test(`resp.age(${resp.age}) = req.age(${req.age}) && resp.name(${resp.name}) = req.name(${req.name}) && resp.salary(${resp.salary}) = req.salary(${req.salary})`, function () {\r",
							"    req.salary = +req.salary; resp.salary = +resp.salary  \r",
							"    pm.expect(resp[\"age\",\"name\",\"salary\"]).to.deep.equal(req[\"age\",\"name\",\"salary\"])\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Andrey&age=24&salary=700",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"4. http://162.55.220.72:5005/user_info_2\r",
							"1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							"*/\r",
							"    // Задания с 8-18:\r",
							"    // 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"    // 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"    // 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"    // 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"    // 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"    // 13. Проверить, что json response имеет параметр person\r",
							"    // 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"    // 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"    // 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"    // 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"    // 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"//\r",
							"//4.1\r",
							"let resp = pm.response.json();\r",
							"console.log(resp)\r",
							"let req = request.data;\r",
							"let inc = ['start_qa_salary', 'qa_salary_after_6_months','qa_salary_after_12_months','qa_salary_after_1.5_year','qa_salary_after_3.5_years','person']\r",
							"\r",
							"for (i in inc){\r",
							"    pm.test(`response have key: ${inc[i]}`, function (){\r",
							"        pm.expect(resp).ownProperty(inc[i])\r",
							"    })\r",
							"}\r",
							"\r",
							"//4.2\r",
							"let sal ={\r",
							"'start_qa_salary':1,\r",
							"'qa_salary_after_6_months':2,\r",
							"'qa_salary_after_12_months':2.7,\r",
							"'qa_salary_after_1.5_year':3.3,\r",
							"'qa_salary_after_3.5_years':3.8\r",
							"}\r",
							"for (i in sal){\r",
							"    pm.test(`response.${i} = request.salary*${sal[i]}`, function(){\r",
							"        pm.expect(resp[i]).to.eql(req.salary*sal[i])\r",
							"    })\r",
							"}\r",
							"//4.3\r",
							"let salinc ={\r",
							"'start_qa_salary':1,\r",
							"'qa_salary_after_6_months':2,\r",
							"'qa_salary_after_12_months':2.7,\r",
							"'qa_salary_after_1.5_year':3.3,\r",
							"'qa_salary_after_3.5_years':3.8,\r",
							"'person':undefined\r",
							"}\r",
							"for (i in salinc){\r",
							"        if (typeof(salinc[i]) == 'number'){\r",
							"            pm.test(`response have key: ${i} && response.${i} = request.salary*${sal[i]}`, function (){\r",
							"            pm.expect(resp).ownProperty(i)\r",
							"            pm.expect(resp[i]).to.eql(req.salary*salinc[i])\r",
							"            })\r",
							"        }else{\r",
							"            pm.test(`response have key: ${i}`, function (){\r",
							"            pm.expect(resp).ownProperty(i)\r",
							"            })\r",
							"        }\r",
							"}\r",
							"//4.3(E)\r",
							"for (i in salinc){\r",
							"    let ft = `response have key: ${i}`\r",
							"    let st = `&& response.${i} = request.salary*${sal[i]}`\r",
							"    if (typeof(salinc[i]) !== 'number'){\r",
							"        st = ``\r",
							"        resp[i] = NaN\r",
							"    };\r",
							"    pm.test(ft+st, function (){\r",
							"        pm.expect(resp).ownProperty(i)\r",
							"        pm.expect(resp[i]).to.eql(req.salary*salinc[i])\r",
							"        })\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
