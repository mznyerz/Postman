{
	"info": {
		"_postman_id": "1c6220a6-9f7f-4cc1-8d69-c39d6ce8a457",
		"name": "HomeWork_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18523166"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resp = pm.response.text();\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test('True string in body', function (){\r",
							"    pm.response.to.have.body('This is the first responce from server!ss')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test ('response.name = request.name (manual)', function(){\r",
							"    pm.expect(resp.name).to.eql('Andrey')\r",
							"})\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test ('response.age = request.age (manual)', function(){\r",
							"    pm.expect(+resp.age).to.eql(24)\r",
							"})\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test ('response.salary = request.salary (manual)', function(){\r",
							"    pm.expect(resp.salary).to.eql(700)\r",
							"})\r",
							"// Спарсить request.\r",
							"var req = request.data;\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('response.name = request.name', function(){\r",
							"    pm.expect(resp.name).to.eql(req.name)\r",
							"})\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test ('response.age = request.age', function(){\r",
							"    pm.expect(resp.age).to.eql(req.age)\r",
							"})\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test ('response.salary = request.salary', function(){\r",
							"    pm.expect(resp.salary).to.eql(+req.salary)\r",
							"})\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(resp.family)\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test('response.u_salary_1_5_year = request.salary*4', function(){\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(req.salary*4)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"// Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('response.name = request.name', function (){\r",
							"    pm.expect(resp.name).to.eql(req.name)\r",
							"})\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('response.age = request.age', function (){\r",
							"    pm.expect(resp.age).to.eql(req.age)\r",
							"})\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('response.salary = request.salary', function (){\r",
							"    pm.expect(resp.salary).to.eql(+req.salary)\r",
							"    console.log('resp.salary = ', resp.salary, 'req.salary = ', req.salary)\r",
							"})\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(resp.family)\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test('param \"dog\" have key \"name\"', function() {\r",
							"    pm.expect(resp.family.pets.dog).ownProperty(\"name\")\r",
							"})\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test('param \"dog\" have key \"age\"', function(){\r",
							"    pm.expect(resp.family.pets.dog).ownProperty(\"age\")\r",
							"})\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test('param \"name\" have value \"Luky\"', function(){\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\")\r",
							"})\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test('param \"age\" have value \"4\"', function (){\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Andrey&age=24&salary=700",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"// Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"console.log(req)\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('response.name = request.name', function(){\r",
							"    pm.expect(resp.name).to.eql(req.name)\r",
							"})\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test('response.age = request.age', function(){\r",
							"    pm.expect(resp.age).to.eql(+req.age)\r",
							"})\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(resp.salary)\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp.salary[0])\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[1])\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[2])\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test('response.salary[0] = request.salary', function(){\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary)\r",
							"})\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('response.salary[1] = request.salary*2', function(){\r",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary*2)\r",
							"})\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test('response.salary[2] = request.salary*3', function(){\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary*3)\r",
							"})\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set('name', resp.name)\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set('age', resp.age)\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set('salary', resp.salary[0])\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"Object.values(resp.salary).forEach((el) => {\r",
							"    console.log(el)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Andrey&age=24&salary=700",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Вставить параметр salary из окружения в request\r",
							"//  Вставить параметр age из окружения в age\r",
							"//  Вставить параметр name из окружения в name\r",
							"//  Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//  Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"//  Спарсить request.\r",
							"var req = request.data;\r",
							"//  Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test('response have param \"start_qa_salary\"', function(){\r",
							"    pm.expect(resp).ownProperty(\"start_qa_salary\")\r",
							"})\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test('response have param \"qa_salary_after_6_months\"', function(){\r",
							"    pm.expect(resp).ownProperty(\"qa_salary_after_6_months\")\r",
							"})\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test('response have param \"qa_salary_after_12_months\"', function(){\r",
							"    pm.expect(resp).ownProperty(\"qa_salary_after_12_months\")\r",
							"})\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test('response have param \"qa_salary_after_1.5_year\"', function(){\r",
							"    pm.expect(resp).ownProperty(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test('response have param \"qa_salary_after_3.5_years\"', function(){\r",
							"    pm.expect(resp).ownProperty(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test('response have param \"person\"', function(){\r",
							"    pm.expect(resp).ownProperty(\"person\")\r",
							"})\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test('response.start_qa_salary = request.salary', function(){\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary)\r",
							"})\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('response.qa_salary_after_6_months = request.salary*2', function(){\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2)\r",
							"})\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test('response.qa_salary_after_12_months = request.salary*2.7', function(){\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7)\r",
							"})\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test('response.qa_salary_after_1.5_year = request.salary*3.3', function(){\r",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(req.salary*3.3)\r",
							"})\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test('response.qa_salary_after_3.5_years = request.salary*3.8', function(){\r",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(req.salary*3.8)\r",
							"})\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test('response.person.u_name[1] = request.salary', function(){\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary)\r",
							"})\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test('response.person.u_age = request.age', function(){\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age)\r",
							"})\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test('response.person.u_salary_5_years = request.salary*4.2', function(){\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2)\r",
							"})\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"Object.entries(resp.person).forEach((el) => {\r",
							"    console.log(el)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}